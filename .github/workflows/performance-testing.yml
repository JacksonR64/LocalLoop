name: üìä Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  schedule:
    # Run weekly performance checks
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test'
        required: true
        default: 'lighthouse'
        type: choice
        options:
          - lighthouse
          - load
          - comprehensive

# Prevent concurrent performance tests
concurrency:
  group: performance-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PERFORMANCE_BUDGET_CPU: '85'  # Performance budget for CPU score
  PERFORMANCE_BUDGET_MEMORY: '90'  # Performance budget for memory score
  LIGHTHOUSE_MIN_SCORE: '85'  # Minimum acceptable Lighthouse score

jobs:
  # Lighthouse Performance Testing
  lighthouse-audit:
    name: üîç Lighthouse Performance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.test_type == 'lighthouse' || github.event.inputs.test_type == 'comprehensive' || github.event.inputs.test_type == '' || github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: |
          npm ci
          npm install -g @lhci/cli

      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: üöÄ Start production server
        run: npm start &
        env:
          PORT: 3000
          NODE_ENV: production

      - name: ‚è≥ Wait for server to be ready
        run: |
          npx wait-on http://localhost:3000 --timeout 60000
          echo "Server is responding, waiting additional 10s for full startup..."
          sleep 10
          # Test server is actually serving content
          curl -f http://localhost:3000 || exit 1
          echo "‚úÖ Server is fully ready for Lighthouse audit"

      - name: üîç Run Lighthouse CI
        run: |
          echo "Starting Lighthouse CI audit..."
          echo "Testing basic connectivity first:"
          curl -I http://localhost:3000
          echo "Running Lighthouse CI..."
          lhci autorun --config=./lighthouserc.js

      - name: üìä Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports-${{ github.run_number }}
          path: |
            .lighthouseci/
            reports/
          retention-days: 14

      - name: üö® Check performance budgets
        run: |
          # Parse Lighthouse results and check budgets
          if [ -f ".lighthouseci/manifest.json" ]; then
            echo "Checking Lighthouse performance budgets..."
            
            # Extract scores from manifest (simplified check)
            PERF_SCORE=$(cat .lighthouseci/manifest.json | jq -r '.[0].summary.performance // 0' | cut -d. -f1)
            ACCESSIBILITY_SCORE=$(cat .lighthouseci/manifest.json | jq -r '.[0].summary.accessibility // 0' | cut -d. -f1)
            
            echo "Performance Score: $PERF_SCORE"
            echo "Accessibility Score: $ACCESSIBILITY_SCORE"
            
            if [ "$PERF_SCORE" -lt "${{ env.LIGHTHOUSE_MIN_SCORE }}" ]; then
              echo "‚ùå Performance score ($PERF_SCORE) is below budget (${{ env.LIGHTHOUSE_MIN_SCORE }})"
              exit 1
            fi
            
            if [ "$ACCESSIBILITY_SCORE" -lt "90" ]; then
              echo "‚ö†Ô∏è Accessibility score ($ACCESSIBILITY_SCORE) is below 90"
            fi
            
            echo "‚úÖ Performance budgets met"
          else
            echo "‚ö†Ô∏è No Lighthouse manifest found, skipping budget check"
          fi

  # Load Testing with k6 
  load-testing:
    name: ‚ö° Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.test_type == 'load' || github.event.inputs.test_type == 'comprehensive' || github.event_name == 'schedule' || github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ‚ö° Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: üöÄ Start production server
        run: npm start &
        env:
          PORT: 3000
          NODE_ENV: production

      - name: ‚è≥ Wait for server to be ready
        run: |
          npx wait-on http://localhost:3000 --timeout 60000
          echo "Server is responding, waiting additional 10s for full startup..."
          sleep 10
          # Test server is actually serving content
          curl -f http://localhost:3000 || exit 1
          echo "‚úÖ Server is fully ready for load testing"

      - name: ‚ö° Run k6 load tests
        run: |
          echo "Starting k6 load test against http://localhost:3000"
          npm run test:load:basic
        continue-on-error: true

      - name: üìä Upload load test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-reports-${{ github.run_number }}
          path: |
            tests/load/results/
            reports/performance/
          retention-days: 14

      - name: üö® Analyze load test results
        run: |
          echo "Load test completed"
          echo "Check detailed results in test artifacts"
          
          # k6 outputs to stdout, basic check if any errors occurred
          if [ $? -eq 0 ]; then
            echo "‚úÖ Load test completed successfully"
          else
            echo "‚ö†Ô∏è Load test completed with warnings/errors"
          fi

  # Memory and CPU profiling
  resource-profiling:
    name: üß† Resource Profiling
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.test_type == 'comprehensive' || github.event_name == 'schedule'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß† Install profiling tools
        run: |
          npm install -g clinic
          npm install -g autocannon

      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: üß† Profile application startup
        run: |
          echo "Starting memory and CPU profiling..."
          
          # Start the app with profiling
          timeout 120s clinic doctor --on-port 'autocannon -c10 -d30 http://localhost:3000' -- npm start || true
          
          # Generate flame graphs if available
          if [ -f ".clinic/doctor.html" ]; then
            echo "‚úÖ Profiling report generated"
          fi

      - name: üìä Upload profiling reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: profiling-reports-${{ github.run_number }}
          path: |
            .clinic/
            reports/profiling/
          retention-days: 7

  # Bundle analysis
  bundle-analysis:
    name: üì¶ Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build with bundle analysis
        run: npm run build:analyze
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          ANALYZE: true

      - name: üìä Check bundle size budgets
        run: |
          echo "Checking bundle size budgets..."
          
          # Check if bundle size report exists
          if [ -f ".next/analyze/bundle-sizes.json" ]; then
            TOTAL_SIZE=$(cat .next/analyze/bundle-sizes.json | jq -r '.sizes.total // 0')
            JS_SIZE=$(cat .next/analyze/bundle-sizes.json | jq -r '.sizes.javascript // 0')
            
            echo "Total Bundle Size: ${TOTAL_SIZE}KB"
            echo "JavaScript Size: ${JS_SIZE}KB"
            
            # Budget checks (in KB)
            if [ "$TOTAL_SIZE" -gt 1000 ]; then
              echo "‚ö†Ô∏è Total bundle size (${TOTAL_SIZE}KB) exceeds budget (1000KB)"
            fi
            
            if [ "$JS_SIZE" -gt 500 ]; then
              echo "‚ö†Ô∏è JavaScript bundle size (${JS_SIZE}KB) exceeds budget (500KB)"
            fi
            
            echo "‚úÖ Bundle analysis complete"
          else
            echo "üìä Running basic bundle size check..."
            find .next -name "*.js" -type f -exec du -ch {} + | grep total
          fi

      - name: üìä Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis-${{ github.run_number }}
          path: |
            .next/analyze/
            reports/bundle/
          retention-days: 14

  # Performance summary
  performance-summary:
    name: üìä Performance Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lighthouse-audit, load-testing, bundle-analysis]

    steps:
      - name: üìä Create performance summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Lighthouse Audit': '${{ needs.lighthouse-audit.result }}',
              'Load Testing': '${{ needs.load-testing.result }}',
              'Bundle Analysis': '${{ needs.bundle-analysis.result }}'
            };
            
            let summary = '## üöÄ Performance Test Results\n\n';
            summary += '| Test Type | Status | Details |\n';
            summary += '|-----------|--------|----------|\n';
            
            for (const [test, status] of Object.entries(results)) {
              const emoji = status === 'success' ? '‚úÖ' : 
                           status === 'failure' ? '‚ùå' : 
                           status === 'skipped' ? '‚è≠Ô∏è' : '‚è≥';
              
              let details = '';
              if (status === 'success') {
                details = 'All metrics within budget';
              } else if (status === 'failure') {
                details = 'Some metrics exceeded budget';
              } else if (status === 'skipped') {
                details = 'Test skipped for this run';
              }
              
              summary += `| ${test} | ${emoji} ${status} | ${details} |\n`;
            }
            
            summary += '\n### üìã Performance Metrics\n\n';
            summary += '- **Lighthouse Score**: Target ‚â•85\n';
            summary += '- **Response Time**: Target <2s average\n';
            summary += '- **P95 Response**: Target <5s\n';
            summary += '- **Bundle Size**: Target <1MB total\n';
            summary += '- **Error Rate**: Target <5%\n\n';
            
            if (Object.values(results).includes('failure')) {
              summary += '‚ö†Ô∏è **Performance issues detected.** Check detailed reports in artifacts.\n\n';
            } else {
              summary += 'üéâ **All performance tests passed!**\n\n';
            }
            
            summary += '_Performance tests help ensure LocalLoop remains fast and responsive._';
            
            console.log(summary); 