name: üß™ Test RLS Backup System

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of backup test to run'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'schema-only'
          - 'data-only'
          - 'connection-test'

jobs:
  test-rls-backup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Make backup script executable
      run: |
        chmod +x scripts/ops/database-backup-rls.sh

    - name: Test RLS backup system
      env:
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        SUPABASE_POOLER_HOST: ${{ secrets.SUPABASE_POOLER_HOST }}
        SUPABASE_POOLER_PORT: ${{ secrets.SUPABASE_POOLER_PORT }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
      run: |
        echo "üß™ Testing RLS-compatible backup system"
        echo "üìã Test type: ${{ github.event.inputs.test_type }}"
        
        # Set up variables
        HOST="${SUPABASE_POOLER_HOST}"
        PORT="${SUPABASE_POOLER_PORT}"
        DATABASE="postgres"
        BACKUP_USER="supabase_backup_user"
        BACKUP_PASSWORD="backup_secure_password_2024"
        
        echo "üîç Pre-flight checks..."
        
        # Check if backup user exists
        export PGPASSWORD="${SUPABASE_DB_PASSWORD}"
        ADMIN_USER="postgres.${SUPABASE_PROJECT_REF}"
        
        USER_EXISTS=$(psql -h "$HOST" -p "$PORT" -U "$ADMIN_USER" -d "$DATABASE" -t -c "
            SELECT CASE 
                WHEN EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '$BACKUP_USER') 
                THEN 'exists' 
                ELSE 'missing' 
            END;
        " | tr -d ' ')
        
        if [ "$USER_EXISTS" = "missing" ]; then
            echo "‚ùå ERROR: Backup user does not exist!"
            echo "üîß Please run the 'üîß Setup Backup User & RLS Policies' workflow first"
            exit 1
        fi
        
        echo "‚úÖ Backup user exists"
        
        # Test backup user connection
        export PGPASSWORD="$BACKUP_PASSWORD"
        if ! psql -h "$HOST" -p "$PORT" -U "$BACKUP_USER" -d "$DATABASE" -c "SELECT 'Connection test successful' as status;" > /dev/null 2>&1; then
            echo "‚ùå ERROR: Cannot connect with backup user"
            echo "üîß Please check backup user credentials and permissions"
            exit 1
        fi
        
        echo "‚úÖ Backup user connection successful"
        
        # Run different test types
        case "${{ github.event.inputs.test_type }}" in
          "connection-test")
            echo "üîó Running connection test only..."
            echo "‚úÖ All connection tests passed!"
            ;;
          
          "schema-only")
            echo "üìã Testing schema-only backup..."
            mkdir -p test-backups
            
            pg_dump \
                -h "$HOST" \
                -p "$PORT" \
                -U "$BACKUP_USER" \
                -d "$DATABASE" \
                --schema-only \
                --no-owner \
                --no-privileges \
                --clean \
                --if-exists \
                --file="test-backups/schema_test.sql"
            
            if [ $? -eq 0 ]; then
                echo "‚úÖ Schema backup successful"
                SCHEMA_SIZE=$(du -h test-backups/schema_test.sql | cut -f1)
                echo "üìä Schema backup size: $SCHEMA_SIZE"
                
                # Quick verification
                if grep -q "CREATE TABLE" test-backups/schema_test.sql; then
                    echo "‚úÖ Schema contains expected CREATE TABLE statements"
                else
                    echo "‚ö†Ô∏è WARNING: Schema backup may be incomplete"
                fi
            else
                echo "‚ùå ERROR: Schema backup failed"
                exit 1
            fi
            ;;
          
          "data-only")
            echo "üíæ Testing data-only backup with RLS..."
            mkdir -p test-backups
            
            pg_dump \
                -h "$HOST" \
                -p "$PORT" \
                -U "$BACKUP_USER" \
                -d "$DATABASE" \
                --data-only \
                --no-owner \
                --no-privileges \
                --enable-row-security \
                --disable-triggers \
                --file="test-backups/data_test.sql"
            
            if [ $? -eq 0 ]; then
                echo "‚úÖ Data backup with RLS successful!"
                DATA_SIZE=$(du -h test-backups/data_test.sql | cut -f1)
                echo "üìä Data backup size: $DATA_SIZE"
                
                # Quick verification
                if grep -q "INSERT INTO\|COPY" test-backups/data_test.sql; then
                    echo "‚úÖ Data backup contains expected INSERT/COPY statements"
                else
                    echo "‚ö†Ô∏è WARNING: Data backup may be empty (this could be normal if tables are empty)"
                fi
            else
                echo "‚ùå ERROR: Data backup failed"
                echo "üîç This was the core issue we're trying to solve!"
                exit 1
            fi
            ;;
          
          "full")
            echo "üöÄ Running full RLS backup test..."
            
            # Run the full backup script
            if ./scripts/ops/database-backup-rls.sh; then
                echo "üéâ BREAKTHROUGH: Full RLS backup successful!"
                
                # Show backup files created
                echo "üìÅ Backup files created:"
                ls -lh backups/localloop_*$(date +"%Y%m%d")*.sql | tail -3
                
                echo ""
                echo "‚úÖ SUCCESS: The RLS backup approach works!"
                echo "üîß Ready to update main backup automation"
            else
                echo "‚ùå ERROR: Full backup script failed"
                echo "üìã Check logs above for specific error details"
                exit 1
            fi
            ;;
        esac
        
        echo ""
        echo "üéØ Test completed: ${{ github.event.inputs.test_type }}"
        
        # Show RLS policies status
        echo "üìã Current RLS policies for backup user:"
        psql -h "$HOST" -p "$PORT" -U "$BACKUP_USER" -d "$DATABASE" -c "
            SELECT 
                schemaname, 
                tablename, 
                policyname
            FROM pg_policies 
            WHERE roles @> ARRAY['$BACKUP_USER'] 
            ORDER BY schemaname, tablename;
        " 2>/dev/null || echo "‚ö†Ô∏è Could not query RLS policies"
        
        # Cleanup test files (keep actual backups)
        rm -rf test-backups/
        
        unset PGPASSWORD 