name: CI Pipeline

on:
  push:
    branches: [ main, develop, fix/ci-pipeline ]
  pull_request:
    branches: [ main, develop ]

# Concurrency settings to cancel outdated runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'

jobs:
  # Stage 1: Code Quality
  lint-and-typecheck:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔍 TypeScript check
        run: npm run type-check

  # Stage 2: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🏗️ Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # Stage 3: Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run tests
        run: npm run test:ci

  # Stage 4: E2E Tests (Optimized for CI speed)
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Reduced from 20 minutes
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix/ci-pipeline'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps chromium webkit firefox

      - name: 🏗️ Build
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 🎭 Run E2E tests
        run: npx playwright test --config=playwright.ci.config.ts
        env:
          CI: true
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Stage 5: Deploy (Production only)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, test, e2e]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  health-check:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 🏥 Wait for deployment to be ready
        run: sleep 30
        
      - name: 🏥 Health Check with Retry Logic
        id: health-check
        run: |
          MAX_ATTEMPTS=5
          DELAY=15
          URL="https://local-loop.vercel.app/api/health"
          
          echo "🔍 Starting health check for $URL"
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i/$MAX_ATTEMPTS..."
            
            RESPONSE=$(curl -s -w "%{http_code}" "$URL" || echo "000")
            HTTP_CODE="${RESPONSE: -3}"
            BODY="${RESPONSE%???}"
            
            echo "HTTP Code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Health check passed!"
              echo "Response: $BODY"
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$HTTP_CODE" = "503" ]; then
              echo "⚠️ Service temporarily unavailable (503). Retrying..."
            else
              echo "❌ Health check failed with HTTP $HTTP_CODE"
              echo "Response: $BODY"
            fi
            
            if [ $i -lt $MAX_ATTEMPTS ]; then
              echo "⏳ Waiting ${DELAY}s before retry..."
              sleep $DELAY
            fi
          done
          
          echo "❌ Health check failed after $MAX_ATTEMPTS attempts"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: 🚨 Trigger Rollback on Health Check Failure  
        if: steps.health-check.outputs.success == 'false'
        run: |
          echo "🚨 Deployment health check failed - triggering rollback workflow"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/rollback.yml/dispatches \
            -d '{"ref":"main","inputs":{"reason":"Health check failure after deployment"}}'