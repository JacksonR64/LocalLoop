name: Comprehensive CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Concurrency settings to cancel outdated runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

jobs:
  # Stage 1: Code Quality & Static Analysis
  lint-and-typecheck:
    name: 🔍 Code Quality & Type Safety
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔍 Run TypeScript type checking
        run: npm run type-check

      - name: 📊 Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            eslint-report.json
            tsc-results.txt
          retention-days: 7

  # Stage 2: Unit Testing with Coverage
  unit-tests:
    name: 🧪 Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests with coverage
        run: npm run test:unit:coverage
        env:
          CI: true

      - name: 📊 Generate coverage report
        run: npm run coverage:report

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: unit-test-coverage

      - name: 📊 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            reports/
          retention-days: 30

      - name: 📊 Coverage threshold check
        run: npm run coverage:check

  # Stage 3: Integration Testing
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint-and-typecheck

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        run: npm run db:setup:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 🔗 Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 📊 Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/integration/
            reports/integration/
          retention-days: 7

  # Stage 4: Build Verification
  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-typecheck, unit-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
          retention-days: 7

      - name: 🔍 Analyze build size
        run: |
          echo "Build Size Analysis" >> build-analysis.txt
          du -sh .next >> build-analysis.txt
          find .next -name "*.js" -type f -exec wc -c {} + | sort -n >> build-analysis.txt

      - name: 📊 Upload build analysis
        uses: actions/upload-artifact@v4
        with:
          name: build-analysis
          path: build-analysis.txt
          retention-days: 30

  # Stage 5: End-to-End Testing
  e2e-tests:
    name: 🎭 E2E Tests (Cross-Browser)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build-verification

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🏗️ Build for testing
        run: npm run build

      - name: 🎭 Run E2E tests
        run: npx playwright test --project="${{ matrix.browser }}"
        env:
          CI: true

      - name: 📊 Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Stage 6: Security & Audit
  security-audit:
    name: 🛡️ Security & Dependency Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint-and-typecheck

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🛡️ Run npm audit
        run: npm audit --audit-level=moderate --production

      - name: 🛡️ Run advanced security audit
        run: npx audit-ci --config .audit-ci.json

      - name: 🔍 License compliance check
        run: npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC" --excludePrivatePackages

      - name: 📊 Upload security audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            audit-results.json
            license-report.json
          retention-days: 30

  # Stage 7: Performance Testing
  performance-tests:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-verification

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for performance testing
        run: npm run build

      - name: 🚀 Start application
        run: npm start &
        env:
          PORT: 3000

      - name: ⏳ Wait for application startup
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: ⚡ Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 📊 Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: |
            .lighthouseci/
            lighthouse-results.json
          retention-days: 30

  # Stage 8: Final Report Generation
  test-summary:
    name: 📋 Test Summary & Reporting
    runs-on: ubuntu-latest
    if: always()
    needs: [unit-tests, integration-tests, e2e-tests, security-audit, performance-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Download all artifacts
        uses: actions/download-artifact@v4

      - name: 📋 Generate comprehensive test report
        run: |
          echo "# 📊 Comprehensive Test Report" > test-summary.md
          echo "## 🎯 Test Results Overview" >> test-summary.md
          echo "- **Workflow Run**: ${{ github.run_number }}" >> test-summary.md
          echo "- **Commit**: ${{ github.sha }}" >> test-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> test-summary.md
          echo "- **Timestamp**: $(date -u)" >> test-summary.md
          echo "" >> test-summary.md
          
          # Add job statuses
          echo "## 🔍 Job Status Summary" >> test-summary.md
          echo "| Stage | Status |" >> test-summary.md
          echo "|-------|--------|" >> test-summary.md
          echo "| Code Quality | ${{ needs.lint-and-typecheck.result }} |" >> test-summary.md
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> test-summary.md
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> test-summary.md
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> test-summary.md
          echo "| Security Audit | ${{ needs.security-audit.result }} |" >> test-summary.md
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> test-summary.md

      - name: 📊 Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary-report
          path: test-summary.md
          retention-days: 90

      - name: 💬 Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Stage 9: Deployment (only on main branch)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [unit-tests, integration-tests, e2e-tests, security-audit, performance-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🚀 Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          github-comment: true