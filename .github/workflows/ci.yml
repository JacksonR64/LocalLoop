name: CI Pipeline

on:
  push:
    branches: [ main, develop, fix/ci-pipeline ]
  pull_request:
    branches: [ main, develop ]

# Concurrency settings to cancel outdated runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'

jobs:
  # Stage 1: Code Quality
  lint-and-typecheck:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔍 TypeScript check
        run: npm run type-check

  # Stage 2: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🏗️ Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # Stage 3: Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run tests
        run: npm run test:ci

  # Stage 4: E2E Tests (Optimized for CI speed)
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Reduced from 20 minutes
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix/ci-pipeline'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps chromium webkit firefox

      - name: 🏗️ Build
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 🎭 Run E2E tests
        run: npx playwright test --config=playwright.ci.config.ts
        env:
          CI: true
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Stage 5: Deploy (Production only)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: 🏥 Verify Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Test health endpoint
          HEALTH_URL="${{ steps.deploy.outputs.preview-url }}/api/health"
          if [ -z "$HEALTH_URL" ]; then
            HEALTH_URL="https://local-loop.vercel.app/api/health"
          fi
          
          echo "Testing health endpoint: $HEALTH_URL"
          
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            
            RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$HEALTH_URL" || echo "000")
            HTTP_CODE=${RESPONSE: -3}
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Health check passed!"
              echo "Response:"
              cat response.json | jq .
              exit 0
            else
              echo "❌ Health check failed with status: $HTTP_CODE"
              if [ -f response.json ]; then
                echo "Response body:"
                cat response.json
              fi
            fi
            
            if [ $i -lt 5 ]; then
              echo "Retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          echo "❌ Health check failed after 5 attempts"
          exit 1

      - name: 🎉 Deployment Success
        if: success()
        run: |
          echo "🎉 LocalLoop successfully deployed to production!"
          echo "🔗 URL: ${{ steps.deploy.outputs.preview-url || 'https://local-loop.vercel.app' }}"
          echo "✅ Health checks: PASSED"