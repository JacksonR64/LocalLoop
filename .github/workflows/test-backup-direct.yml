name: üîç Test Database Backup Direct

on:
  workflow_dispatch:

jobs:
  test-backup:
    name: üîç Test Database Backup Script Directly
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
    
    - name: üõ†Ô∏è Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client netcat-traditional
    
    - name: üóÑÔ∏è Setup Environment
      run: |
        echo "SUPABASE_PROJECT_REF=${{ secrets.SUPABASE_PROJECT_REF }}" >> $GITHUB_ENV
        echo "SUPABASE_DB_PASSWORD=${{ secrets.SUPABASE_DB_PASSWORD }}" >> $GITHUB_ENV
        echo "SUPABASE_POOLER_HOST=${{ secrets.SUPABASE_POOLER_HOST }}" >> $GITHUB_ENV
        echo "SUPABASE_POOLER_PORT=${{ secrets.SUPABASE_POOLER_PORT }}" >> $GITHUB_ENV
        echo "BACKUP_DIR=./test-backup" >> $GITHUB_ENV
        echo "LOG_FILE=./test-backup.log" >> $GITHUB_ENV
    
    - name: üìÅ Create Backup Directory
      run: |
        mkdir -p ./test-backup
        mkdir -p ./logs
    
    - name: üîÑ Run Database Backup Script Directly
      run: |
        chmod +x scripts/ops/database-backup.sh
        ./scripts/ops/database-backup.sh
    
    - name: üìã Show Backup Results
      if: always()
      run: |
        echo "=== BACKUP DIRECTORY ==="
        ls -la ./test-backup/ || echo "No backup directory"
        echo ""
        echo "=== LOG FILE ==="
        cat ./test-backup.log || echo "No log file"
        echo ""
        echo "=== ENVIRONMENT VARIABLES ==="
        echo "SUPABASE_PROJECT_REF: ${SUPABASE_PROJECT_REF:-NOT_SET}"
        echo "SUPABASE_DB_PASSWORD: ${SUPABASE_DB_PASSWORD:+SET}"
        echo "SUPABASE_POOLER_HOST: ${SUPABASE_POOLER_HOST:-NOT_SET}"
        echo "SUPABASE_POOLER_PORT: ${SUPABASE_POOLER_PORT:-NOT_SET}" 