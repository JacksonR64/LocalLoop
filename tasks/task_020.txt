# Task ID: 20
# Title: Implement Add to Calendar Functionality for Google Calendar Integration
# Status: done
# Dependencies: 19, 10, 4, 8
# Priority: high
# Description: Create the API endpoint and frontend functionality to add events to users' Google Calendars when they click the "Add to Calendar" button, leveraging the existing OAuth connection.
# Details:
This task involves implementing the complete flow for adding events to users' Google Calendars:

1. **API Endpoint Development**:
   - Create a new API route at `/api/calendar/add-event` that accepts POST requests with event data
   - Implement authentication verification to ensure the user is logged in
   - Extract the Google OAuth token from the user's session/database
   - Use the googleapis library (v114+) to create a calendar event with the following data:
     - Event title, description, location
     - Start and end times (properly formatted as ISO strings)
     - Time zone information
     - Any additional metadata (e.g., event URL)
   - Return appropriate success/error responses with status codes

2. **Frontend Implementation**:
   - Modify the `GoogleCalendarConnect` component to include the "Add to Calendar" functionality
   - Extract event data from the event details page, including:
     - Event title, description, location
     - Start and end times
     - Venue information
   - Add a click handler to the "Add to Calendar" button that:
     - Shows a loading state during the API call
     - Makes a POST request to the new API endpoint with the event data
     - Handles the response appropriately

3. **Error Handling and User Feedback**:
   - Implement comprehensive error handling for common scenarios:
     - User not authenticated with Google
     - OAuth token expired
     - API rate limits
     - Network failures
   - Add toast notifications or alert components for:
     - Success: "Event added to your Google Calendar"
     - Error: Specific error message based on the failure type
   - Include retry logic for recoverable errors

4. **Integration with Existing OAuth Flow**:
   - Ensure the implementation works with the existing OAuth connection
   - Add logic to check if the user has already authorized Google Calendar access
   - If not authorized, redirect to the OAuth consent flow before attempting to add the event
   - After successful OAuth, return to the event page and automatically retry adding the event

5. **Code Organization**:
   - Update the Google Calendar utility functions in `lib/google-calendar.ts` to include the new event creation functionality
   - Ensure proper separation of concerns between API, UI components, and utility functions
   - Add appropriate TypeScript interfaces for event data and API responses

# Test Strategy:
1. **Unit Testing**:
   - Write unit tests for the Google Calendar API utility functions
   - Mock the googleapis library to test successful and failed event creation
   - Test error handling for various failure scenarios

2. **Integration Testing**:
   - Test the API endpoint with valid and invalid event data
   - Verify proper error responses for unauthorized requests
   - Test the endpoint with expired OAuth tokens to ensure proper handling

3. **End-to-End Testing**:
   - Create a test user with Google OAuth credentials
   - Navigate to an event detail page and click "Add to Calendar"
   - Verify the event is added to the user's Google Calendar
   - Check that the correct event details are transferred to Google Calendar
   - Test the flow when a user is not connected to Google Calendar
   - Verify the OAuth flow works correctly when needed

4. **Manual Testing Checklist**:
   - Test adding events with various time formats (same day, multi-day)
   - Verify the event appears correctly in Google Calendar with all details
   - Test with different user accounts (new users, existing users)
   - Test error scenarios by temporarily disabling API access
   - Verify proper loading states and user feedback
   - Test on multiple browsers and devices

5. **Performance Testing**:
   - Measure API response times for event creation
   - Test with concurrent requests to ensure stability
   - Verify the system handles Google API rate limits appropriately
