# Task ID: 22
# Title: Fix Critical Application Image Issues
# Status: done
# Dependencies: 21, 6, 1
# Priority: high
# Description: Address three immediate image-related issues: replace missing farmers-market images with placeholders, update deprecated Next.js Image properties, and implement proper error handling for missing images.
# Details:
This task involves fixing three critical image-related issues in the application:

1. **Replace Missing Farmers-Market Images**:
   - Identify all instances where farmers-market images are referenced but not loading
   - Implement one of two solutions:
     a. Add proper placeholder images that display when the original image fails to load
     b. Modify the UI to gracefully hide the image gallery section when images are unavailable
   - Update the image sources to point to valid resources or implement conditional rendering
   - Consider adding a fallback UI component that displays when image data is unavailable

2. **Fix Deprecated Next.js Image Properties**:
   - Search the codebase for all instances of the deprecated `onLoadingComplete` property in Next.js Image components
   - Replace each occurrence with the current `onLoad` property
   - Example change:
     ```jsx
     // From:
     <Image 
       src="/images/event.jpg"
       alt="Event image"
       onLoadingComplete={(img) => handleImageLoad(img)}
       width={300}
       height={200}
     />
     
     // To:
     <Image 
       src="/images/event.jpg"
       alt="Event image"
       onLoad={(event) => handleImageLoad(event.target)}
       width={300}
       height={200}
     />
     ```
   - Note that the parameter structure differs between the two callbacks - adjust handler functions accordingly
   - Test each image component after modification to ensure loading events still work correctly

3. **Add Error Handling for Missing Images**:
   - Implement proper error boundaries or try/catch blocks around image components
   - Add the `placeholder="blur"` or appropriate fallback for Next.js Image components where applicable
   - For non-Next.js images, implement onerror handlers to display fallback content
   - Create a reusable ImageWithFallback component:
     ```jsx
     const ImageWithFallback = ({ src, alt, ...props }) => {
       const [imgSrc, setImgSrc] = useState(src);
       
       return (
         <Image
           {...props}
           src={imgSrc}
           alt={alt}
           onError={() => setImgSrc('/images/placeholder.jpg')}
         />
       );
     };
     ```
   - Update image loading logic to handle API errors gracefully
   - Add logging for image loading failures to help with debugging

Ensure all changes maintain responsive design and accessibility standards. Test thoroughly across different browsers and device sizes.

# Test Strategy:
To verify the successful implementation of these fixes:

1. **For Farmers-Market Images**:
   - Manually test the farmers-market pages to confirm images display correctly
   - Intentionally break image paths to verify placeholder images appear as expected
   - Test with network throttling to ensure graceful loading behavior
   - Verify that the UI remains visually balanced whether images load or placeholders are shown
   - Check responsive behavior on mobile, tablet, and desktop viewports

2. **For Next.js Image Property Updates**:
   - Create a comprehensive test checklist of all pages with image components
   - Verify each page loads without console warnings about deprecated properties
   - Test image loading events to confirm they still trigger correctly with the new `onLoad` property
   - Check browser developer tools to ensure no regression in image loading performance
   - Run Lighthouse tests to verify overall page performance hasn't degraded

3. **For Error Handling Implementation**:
   - Simulate various image loading failure scenarios:
     - Missing image files
     - Server returning errors (403, 404, 500)
     - Slow network connections
     - Corrupted image data
   - Verify that appropriate fallback content appears in each error case
   - Check that error states don't break page layout or user experience
   - Confirm that error logging captures relevant information for debugging
   - Test across multiple browsers (Chrome, Firefox, Safari, Edge)

Document all test results with screenshots before and after the fixes. Create a regression test plan to ensure these issues don't recur in future updates.
