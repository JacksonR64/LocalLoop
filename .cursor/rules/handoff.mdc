---
description:
globs:
alwaysApply: false
---
# 🔄 Chat Session Handoff Protocol

## 🎯 **Trigger: User Says "Handoff Time"**

When the user says **"handoff time"** (or variations like "time to handoff", "ready for handoff", "handoff please"), immediately execute this complete automated process:

---

## 📋 **MANDATORY Handoff Checklist** 

### **Step 1: Git Status & Commit Check ✅**
```bash
# 1. Check git status for uncommitted changes
git status

# 2. If changes exist, stage and commit them
git add .
git commit -m "feat/fix/chore: [session-summary] - [key-accomplishments] - Ready for handoff"

# 3. Push to remote repository
git push origin main
```

**Commit Message Template:**
```
<type>(<scope>): <session-summary>

<detailed-description>
- ✅ <Accomplishment 1>
- ✅ <Accomplishment 2>
- ✅ <Accomplishment N>

<technical-details>
<testing-status>
<build-status>

Session handoff complete - Ready for continuation
```

### **Step 2: Memory Bank Updates ✅**
Update ALL relevant memory bank files:

**`memory-bank/progress.md`:**
- Current task completion status
- Recent accomplishments summary
- Next task priorities
- Timestamp of handoff

**`memory-bank/techContext.md`:**
- New technical patterns discovered
- Debugging solutions learned
- Architecture updates
- Performance optimizations applied

**`memory-bank/activeContext.md`:**
- Current development focus
- Immediate next steps
- Blockers or dependencies
- Session summary

### **Step 3: Build & Test Validation ✅**
```bash
# 1. Verify build passes
npm run build

# 2. Run type checking
npm run type-check

# 3. Run linting
npm run lint

# 4. Run available tests
npm run test (if tests exist)

# 5. Start dev server briefly to verify
npm run dev & sleep 5 && curl -s http://localhost:3000 > /dev/null && kill %1
```

### **Step 4: TaskMaster Status Update ✅**
Using TaskMaster MCP tools:
```typescript
// 1. Get current task status
get_tasks({ projectRoot, withSubtasks: true })

// 2. Update any completed subtasks/tasks
set_task_status({ id: "X.X", status: "done", projectRoot })

// 3. Identify next task for handoff
next_task({ projectRoot })
```

### **Step 5: Rules Compliance Verification ✅**
- ✅ Development workflow rules followed
- ✅ Coding standards maintained  
- ✅ Documentation updated
- ✅ Memory bank current
- ✅ Git history clean

### **Step 6: Handoff Prompt Generation ✅**
Create comprehensive prompt with:

**Context Section:**
- Project overview and current completion %
- Recent session accomplishments
- Current technical state

**Next Steps Section:**  
- Specific next task to work on
- Required tools and approaches
- Expected outcomes

**Knowledge Sources:**
- Memory bank file references
- Rules directory guidance
- Key technical patterns

---

## 📝 **Handoff Prompt Template**

```markdown
## 🚀 **[Project Name] Development Continuation**

### **📊 Current Status**
[Project description] at **X% completion (Y/Z tasks done)**. Previous session: [session summary].

### **🎯 Your Next Objective** 
**[Next Task]**: [Detailed task description and requirements]

### **📚 Essential Knowledge Sources**
**CRITICAL**: Review these files before starting:
- **Memory Bank**: `/memory-bank/` - Complete project history and current status
- **Rules Directory**: `/.cursor/rules/` - Development patterns and workflows
- **TaskMaster**: Use MCP tools for task management

### **✅ Recent Accomplishments**
- [Key accomplishment 1]
- [Key accomplishment 2]  
- [Key accomplishment 3]

### **🛠️ Required Tools**
**Primary**: TaskMaster MCP tools
**Secondary**: Standard development tools

### **🔄 Development Process**
1. Start with `get_tasks` and `next_task`
2. Use sequential thinking for complex problems
3. Update memory bank with learnings
4. Follow established patterns from rules

### **💡 Technical Context**
- [Current tech stack]
- [Recent fixes/changes]
- [Known issues or considerations]

**Project Root**: [absolute path]

**Everything ready for continuation! 🚀**
```

---

## 🚨 **Error Handling During Handoff**

### **If Build Fails:**
1. Identify and document the issue
2. Attempt quick fix if obvious
3. If complex, document in memory bank as blocker
4. Include in handoff prompt as "URGENT: Build issue needs resolution"

### **If Git Push Fails:**
1. Check for conflicts or auth issues
2. Attempt resolution (pull, merge, etc.)
3. Document any unresolved git issues
4. Include git status in handoff prompt

### **If Memory Bank Update Fails:**
1. Retry with smaller updates
2. Document what was accomplished in commit message
3. Flag for next session to complete documentation

---

## 🎯 **Success Criteria for Handoff**

- ✅ All code changes committed and pushed
- ✅ Memory bank reflects current state
- ✅ Build passes without errors
- ✅ TaskMaster status current
- ✅ Next session has clear starting point
- ✅ No loose ends or undocumented work

---

## 💬 **User Confirmation Message**

After completing handoff process:

```
## ✅ **Handoff Complete!**

**Git Status**: ✅ All changes committed and pushed to main
**Memory Bank**: ✅ Updated with session learnings  
**Build Status**: ✅ Passing / ⚠️ [Issue details]
**TaskMaster**: ✅ Status current, next task identified
**Next Focus**: [Next task summary]

**Handoff Prompt**: Ready for next chat session
**Session Summary**: [Brief accomplishments]

🚀 **You're all set for a fresh chat!**
```

---

## 🔧 **Customization Notes**

- Adjust commit message templates for project type
- Modify build commands based on project stack  
- Add project-specific validation steps
- Include additional memory bank sections as needed
- Customize handoff prompt based on project complexity

**This rule ensures seamless transitions between chat sessions with zero manual work required from the user.**
