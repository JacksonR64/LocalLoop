# LocalLoop Product Requirements Document (PRD)

## 1. Introduction

### 1.1 Purpose of Document
This Product Requirements Document (PRD) defines the comprehensive requirements for the LocalLoop community events platform. It serves as the authoritative reference for the development team and is structured to facilitate AI-assisted task breakdown and implementation.

### 1.2 Product Overview
LocalLoop is a lightweight, mobile-friendly web platform designed for small local organizations to share and manage events with community members. It supports both free and paid events, allowing users to RSVP, purchase tickets, and add events to their calendars via **Google Calendar API integration** (primary client requirement).

### 1.3 Scope
This document covers the Minimum Viable Product (MVP) requirements for LocalLoop, including event discovery, RSVP functionality, **Google Calendar API integration**, ticketing, user accounts, and staff dashboard features. It also outlines future features planned for post-MVP development.

### 1.4 Definitions and Acronyms
- **RSVP**: "Répondez s'il vous plaît" - A request to respond to an invitation
- **MVP**: Minimum Viable Product
- **UX**: User Experience
- **SSR**: Server-Side Rendering
- **RLS**: Row-Level Security (Supabase feature)
- **ISR**: Incremental Static Regeneration (Next.js feature)
- **WCAG**: Web Content Accessibility Guidelines
- **GDPR**: General Data Protection Regulation
- **PCI**: Payment Card Industry
- **Google Calendar API**: Google's calendar integration service for programmatic event creation

### 1.5 References
- LocalLoop System Architecture Document
- Supabase Documentation
- Next.js Documentation
- Stripe API Documentation
- **Google Calendar API Documentation** (Client Requirement)

## 2. Product Vision and Goals

### 2.1 Vision Statement
To provide local community organizations with a simple yet powerful platform to promote events, manage RSVPs, and process ticket sales, while offering community members an intuitive way to discover and participate in local activities with seamless **Google Calendar integration**.

### 2.2 Business Objectives
1. Enable small local organizations to easily create and manage events
2. Simplify the RSVP and ticketing process for community events
3. Provide a mobile-friendly platform accessible to all community members
4. **Integrate directly with Google Calendar API for seamless event addition** (Client Requirement)
5. Offer basic analytics for event organizers to track performance
6. Create a foundation for future community engagement features

### 2.3 Success Metrics
1. Successful deployment with full event management, RSVP, and ticketing flow
2. 100% test coverage on payment and RSVP paths
3. **Google Calendar API integration working reliably** (Primary Client Requirement)
4. Admin dashboard showing live RSVP numbers
5. Deployment on a custom domain with Supabase and Stripe integrated

### 2.4 Target Audience
1. **Primary**: Local community groups and businesses that want to publicize events, workshops, or gatherings
2. **Secondary**: Residents in those communities who attend local events and use Google Calendar

### 2.5 Key Differentiators
Unlike platforms like Eventbrite, LocalLoop:
1. Emphasizes community-first UX with mobile-friendly RSVP tools
2. **Provides direct Google Calendar API integration** (not just .ics downloads)
3. Offers staff dashboards for simple event control
4. Integrates calendar syncing and optional Stripe payments
5. Allows guest access for fast RSVP or ticket flow
6. Provides a foundation for future social and native features

## 3. User Roles and Personas

### 3.1 End Users (Community Members)
**Persona: Alex, 35, Community Participant**
- Wants to discover local events
- Prefers mobile browsing
- Values simple RSVP process
- **Uses Google Calendar for personal scheduling** (Key requirement)
- Occasionally purchases tickets to paid events
- **Expects one-click calendar integration**

**Capabilities:**
- Browse and search events
- RSVP to free events
- Purchase tickets to paid events
- Create optional user account
- View upcoming and past events in profile
- **Add events directly to Google Calendar with one click** (Client Requirement)

### 3.2 Event Organizers
**Persona: Jamie, 42, Community Group Leader**
- Organizes regular community events
- Needs to track attendance
- Occasionally runs paid workshops
- Wants simple analytics on event performance
- Manages a small team of volunteers
- **Wants attendees to easily add events to their calendars**

**Capabilities:**
- Create and manage events
- Set up free RSVPs or paid tickets
- Monitor registrations and sales
- Export attendee lists
- View basic analytics
- Duplicate past events

### 3.3 Administrators
**Persona: Sam, 38, Platform Administrator**
- Manages the overall platform
- Supports event organizers
- Monitors system performance
- Ensures compliance with regulations

**Capabilities:**
- All organizer capabilities
- User management
- System configuration
- Access to all events and data

### 3.4 Guest Users
**Persona: Jordan, 28, First-time Visitor**
- Discovers events through social sharing
- May not want to create an account immediately
- Values quick access to event information
- **May have Google account for calendar access**
- May decide to register later if attending multiple events

**Capabilities:**
- Browse events without an account
- RSVP to free events as guest
- Purchase tickets as guest
- **Add events to Google Calendar (with Google OAuth consent)**
- Convert to registered user later

## 4. User Stories and Scenarios

### 4.1 Event Discovery and Browsing

**User Story 4.1.1:** As a community member, I want to browse upcoming events so that I can discover activities that interest me.
```
Given I am on the LocalLoop homepage
When I scroll through the event listings
Then I should see a list of upcoming events with key information
And events should be sorted by date by default
```

**User Story 4.1.2:** As a community member, I want to filter events by date range so that I can find events that fit my schedule.
```
Given I am browsing events
When I select a date filter (Today, This Weekend, Next Week)
Then the event list should update to show only events in that timeframe
```

**User Story 4.1.3:** As a community member, I want to filter events by category so that I can find events that match my interests.
```
Given I am browsing events
When I select a category filter (Workshop, Meeting, Social, etc.)
Then the event list should update to show only events in that category
```

**User Story 4.1.4:** As a community member, I want to search for events by keyword so that I can find specific events quickly.
```
Given I am on the events page
When I enter a keyword in the search box
Then the event list should update to show events matching that keyword
```

### 4.2 Event Details and RSVP

**User Story 4.2.1:** As a community member, I want to view detailed information about an event so that I can decide if I want to attend.
```
Given I am browsing events
When I click on an event card
Then I should see a detailed page with complete event information
```

**User Story 4.2.2:** As a community member, I want to RSVP to a free event so that I can secure my spot.
```
Given I am viewing a free event
When I click the RSVP button
Then I should be able to register for the event
And receive confirmation of my registration
```

**User Story 4.2.3:** As a community member, I want to see the event location on a map so that I can plan how to get there.
```
Given I am viewing an event with a physical location
When I look at the location section
Then I should see an interactive map showing the venue
```

**User Story 4.2.4:** As a community member, I want to add an event directly to my Google Calendar so that I don't forget about it. (CLIENT REQUIREMENT)
```
Given I have RSVP'd to an event
When I click "Add to Google Calendar"
Then I should be prompted to authenticate with Google (if not already)
And the event should be automatically created in my Google Calendar
And I should see confirmation that the event was added
```

### 4.3 Ticketing and Payments

**User Story 4.3.1:** As a community member, I want to purchase tickets to a paid event so that I can attend.
```
Given I am viewing a paid event
When I click "Buy Tickets"
Then I should be taken to a secure checkout process
```

**User Story 4.3.2:** As a community member, I want to select different ticket types or quantities so that I can make the appropriate purchase.
```
Given I am in the ticket purchase flow
When I view the ticket options
Then I should be able to select from available ticket types
And specify the quantity of each
```

**User Story 4.3.3:** As a community member, I want to receive confirmation of my ticket purchase so that I know the transaction was successful.
```
Given I have completed a ticket purchase
When the payment is processed
Then I should receive an email confirmation
And see a confirmation page with my ticket details
And have the option to add the event to Google Calendar
```

**User Story 4.3.4:** As an event organizer, I want to offer refunds when necessary so that I can maintain good customer relations.
```
Given I am managing a paid event
When I need to issue a refund
Then I should be able to process it through the dashboard
```

### 4.4 User Accounts and Profiles

**User Story 4.4.1:** As a community member, I want to create an account so that I can track my events and tickets.
```
Given I am using LocalLoop
When I click "Sign Up"
Then I should be able to create an account with email or social login
```

**User Story 4.4.2:** As a registered user, I want to view my upcoming and past events so that I can keep track of my activities.
```
Given I am logged into my account
When I navigate to my profile
Then I should see lists of my upcoming and past events
```

**User Story 4.4.3:** As a guest user, I want to RSVP or purchase tickets without creating an account so that I can quickly complete my transaction.
```
Given I am not logged in
When I RSVP or purchase tickets
Then I should be able to complete the process as a guest
And have the option to create an account afterward
And still be able to add events to Google Calendar via OAuth
```

### 4.5 Staff Dashboard and Event Management

**User Story 4.5.1:** As an event organizer, I want to create a new event so that I can publicize it to the community.
```
Given I am logged in as an organizer
When I access the dashboard and click "Create Event"
Then I should be able to enter all event details
And publish the event when ready
```

**User Story 4.5.2:** As an event organizer, I want to monitor RSVPs and ticket sales so that I can track attendance.
```
Given I am logged in as an organizer
When I view one of my events in the dashboard
Then I should see up-to-date RSVP and sales information
```

**User Story 4.5.3:** As an event organizer, I want to export attendee data so that I can use it for check-in or follow-up.
```
Given I am logged in as an organizer
When I view the attendee list for an event
Then I should be able to export it as a CSV file
```

## 5. Functional Requirements

### 5.1 Event Discovery and Browsing

#### 5.1.1 Homepage and Event Listings
- FR-5.1.1.1: The system shall display a homepage featuring upcoming events.
- FR-5.1.1.2: Event cards shall display: event title, date/time, location, category, and price (if applicable).
- FR-5.1.1.3: Events shall be sorted by date (soonest first) by default.
- FR-5.1.1.4: The system shall support pagination or infinite scrolling for event listings.
- FR-5.1.1.5: Featured events shall be prominently displayed at the top of the homepage.

#### 5.1.2 Filtering and Search
- FR-5.1.2.1: The system shall provide date filters for "Today," "This Weekend," and "Next Week."
- FR-5.1.2.2: The system shall provide category filters for event types (Workshop, Meeting, Social, etc.).
- FR-5.1.2.3: The system shall support keyword search across event titles and descriptions.
- FR-5.1.2.4: The system shall allow combining multiple filters simultaneously.
- FR-5.1.2.5: The system shall display the number of events matching current filters.

#### 5.1.3 Mobile Responsiveness
- FR-5.1.3.1: The interface shall be fully responsive across desktop, tablet, and mobile devices.
- FR-5.1.3.2: Touch-friendly UI elements shall be used throughout the mobile interface.
- FR-5.1.3.3: The mobile layout shall prioritize essential information for small screens.
- FR-5.1.3.4: Filter controls shall be accessible via a collapsible menu on mobile devices.

#### 5.1.4 Guest Access
- FR-5.1.4.1: The system shall allow browsing events without requiring account creation.
- FR-5.1.4.2: The system shall allow guest users to access all event details.
- FR-5.1.4.3: The system shall prompt but not require account creation during RSVP or ticket purchase.

### 5.2 Event Details and RSVP

#### 5.2.1 Event Information Display
- FR-5.2.1.1: Event detail pages shall display: title, description, date/time, location, organizer, category, capacity, and price (if applicable).
- FR-5.2.1.2: Event detail pages shall display one event image.
- FR-5.2.1.3: The system shall display event status (upcoming, in progress, past, full).
- FR-5.2.1.4: The system shall show the event organizer's name and contact information.

#### 5.2.2 Location and Map Integration
- FR-5.2.2.1: The system shall display an interactive map for events with physical locations.
- FR-5.2.2.2: The system shall display the full address and any location notes.
- FR-5.2.2.3: The system shall support online/virtual events with appropriate location display.

#### 5.2.3 RSVP Functionality
- FR-5.2.3.1: The system shall provide one-click RSVP for logged-in users.
- FR-5.2.3.2: The system shall support guest RSVP with email address collection.
- FR-5.2.3.3: The system shall send email confirmations for all RSVPs.
- FR-5.2.3.4: The system shall allow users to cancel their RSVP.

#### 5.2.4 Attendee Count/Capacity
- FR-5.2.4.1: The system shall display current RSVP count and total capacity.
- FR-5.2.4.2: The system shall prevent RSVPs when capacity is reached.
- FR-5.2.4.3: The system shall display a "Full" indicator when capacity is reached.
- FR-5.2.4.4: The system shall support waitlists for full events (optional for MVP).

#### 5.2.5 Sharing Capabilities
- FR-5.2.5.1: The system shall provide a unique, shareable URL for each event.
- FR-5.2.5.2: The system shall include basic metadata for proper link previews when shared.

#### 5.2.6 Google Calendar Integration (CLIENT REQUIREMENT)
- FR-5.2.6.1: The system shall integrate with Google Calendar API to directly create events in user's Google Calendar.
- FR-5.2.6.2: The system shall implement Google OAuth 2.0 flow for calendar access permissions.
- FR-5.2.6.3: The system shall handle Google Calendar API authentication and token management.
- FR-5.2.6.4: The system shall create calendar events with complete details (title, description, location, date/time).
- FR-5.2.6.5: The system shall provide fallback .ics file download for non-Google calendar users.
- FR-5.2.6.6: The system shall gracefully handle Google Calendar API errors and rate limits.

### 5.3 Ticketing and Payments

#### 5.3.1 Stripe Integration
- FR-5.3.1.1: The system shall integrate with Stripe for payment processing.
- FR-5.3.1.2: The system shall support standard credit/debit card payments.
- FR-5.3.1.3: The system shall implement Stripe Checkout for the payment flow.
- FR-5.3.1.4: The system shall handle Stripe webhooks for payment confirmations.

#### 5.3.2 Ticket Types and Pricing
- FR-5.3.2.1: The system shall support multiple ticket types per event.
- FR-5.3.2.2: The system shall support different pricing tiers.
- FR-5.3.2.3: The system shall allow setting capacity limits per ticket type.
- FR-5.3.2.4: The system shall track available inventory for each ticket type.

#### 5.3.3 Checkout Process
- FR-5.3.3.1: The system shall allow selecting ticket quantities before checkout.
- FR-5.3.3.2: The system shall display an order summary before payment.
- FR-5.3.3.3: The system shall collect necessary attendee information during checkout.
- FR-5.3.3.4: The system shall support guest checkout with email collection.

#### 5.3.4 Order Confirmation
- FR-5.3.4.1: The system shall display a confirmation page after successful payment.
- FR-5.3.4.2: The system shall send email confirmations with ticket details.
- FR-5.3.4.3: The system shall store order and payment information securely.

#### 5.3.5 Ticket Delivery
- FR-5.3.5.1: The system shall generate a unique QR code or confirmation number for each ticket.
- FR-5.3.5.2: The system shall include tickets in the confirmation email.
- FR-5.3.5.3: The system shall make tickets accessible in the user's profile (if registered).

#### 5.3.6 Refund Handling
- FR-5.3.6.1: The system shall allow organizers to process full refunds.
- FR-5.3.6.2: The system shall send email notifications for refunds.
- FR-5.3.6.3: The system shall update ticket inventory when refunds occur.

### 5.4 User Accounts and Profiles

#### 5.4.1 Registration and Login
- FR-5.4.1.1: The system shall support account creation with email and password.
- FR-5.4.1.2: The system shall enforce password security requirements.
- FR-5.4.1.3: The system shall support password reset functionality.
- FR-5.4.1.4: The system shall allow users to delete their accounts.

#### 5.4.2 Social Login
- FR-5.4.2.1: The system shall support Google OAuth login.
- FR-5.4.2.2: The system shall support Apple OAuth login.
- FR-5.4.2.3: The system shall link social accounts to existing email accounts when possible.

#### 5.4.3 Email Verification
- FR-5.4.3.1: The system shall send verification emails for new accounts.
- FR-5.4.3.2: The system shall require email verification before certain actions.
- FR-5.4.3.3: The system shall allow resending verification emails.

#### 5.4.4 User Profile Management
- FR-5.4.4.1: The system shall allow users to update their profile information.
- FR-5.4.4.2: The system shall allow users to change their email address.
- FR-5.4.4.3: The system shall allow users to change their password.

#### 5.4.5 Event History
- FR-5.4.5.1: The system shall display upcoming events the user has RSVP'd to or purchased tickets for.
- FR-5.4.5.2: The system shall display past events the user has attended.
- FR-5.4.5.3: The system shall allow users to cancel upcoming RSVPs from their profile.

#### 5.4.6 Payment Methods
- FR-5.4.6.1: The system shall allow users to save payment methods (optional).
- FR-5.4.6.2: The system shall allow users to delete saved payment methods.
- FR-5.4.6.3: The system shall use Stripe for secure payment method storage.

#### 5.4.7 Email Preferences
- FR-5.4.7.1: The system shall allow users to set email notification preferences.
- FR-5.4.7.2: The system shall respect user email preferences for marketing communications.
- FR-5.4.7.3: The system shall always send transactional emails (confirmations, etc.).

### 5.5 Staff Dashboard

#### 5.5.1 Event Creation and Management
- FR-5.5.1.1: The system shall provide a form for creating new events.
- FR-5.5.1.2: The form shall include fields for: title, description, date/time, location, category, capacity, image upload, and ticket types (if paid).
- FR-5.5.1.3: The system shall validate all required fields before submission.
- FR-5.5.1.4: The system shall allow editing existing events.
- FR-5.5.1.5: The system shall allow cancelling events with notification to attendees.

#### 5.5.2 RSVP and Sales Monitoring
- FR-5.5.2.1: The system shall display real-time RSVP and ticket sales data.
- FR-5.5.2.2: The system shall show capacity remaining for each event.
- FR-5.5.2.3: The system shall display total revenue for paid events.
- FR-5.5.2.4: The system shall show RSVP conversion rate (views vs. RSVPs).

#### 5.5.3 Attendee Management
- FR-5.5.3.1: The system shall display a list of all attendees for each event.
- FR-5.5.3.2: The system shall allow searching and filtering the attendee list.
- FR-5.5.3.3: The system shall allow manually adding or removing attendees.
- FR-5.5.3.4: The system shall support bulk actions for attendee management.

#### 5.5.4 Analytics Dashboard
- FR-5.5.4.1: The system shall display basic analytics for each event.
- FR-5.5.4.2: Analytics shall include: views, RSVPs, ticket sales, and revenue.
- FR-5.5.4.3: The system shall display trends over time when applicable.

#### 5.5.5 Data Export
- FR-5.5.5.1: The system shall allow exporting attendee data as CSV.
- FR-5.5.5.2: The system shall allow exporting sales data as CSV.
- FR-5.5.5.3: Exports shall include all relevant fields for the selected data.

#### 5.5.6 Event Duplication
- FR-5.5.6.1: The system shall allow duplicating existing events.
- FR-5.5.6.2: Duplication shall copy all event details except date/time.
- FR-5.5.6.3: The system shall prompt for new date/time during duplication.

## 6. Non-Functional Requirements

### 6.1 Performance
- NFR-6.1.1: The homepage shall load within 2 seconds on standard connections.
- NFR-6.1.2: Event listings shall use pagination or infinite scrolling for efficient loading.
- NFR-6.1.3: The system shall implement appropriate caching strategies for event listings.
- NFR-6.1.4: The system shall optimize image loading for fast page rendering.
- NFR-6.1.5: API responses shall complete within 500ms for standard operations.
- NFR-6.1.6: Google Calendar API calls shall complete within 3 seconds with proper error handling.

### 6.2 Security
- NFR-6.2.1: All user passwords shall be securely hashed using industry-standard algorithms.
- NFR-6.2.2: All payment processing shall comply with PCI DSS requirements.
- NFR-6.2.3: The system shall implement HTTPS for all communications.
- NFR-6.2.4: The system shall implement proper authentication and authorization checks.
- NFR-6.2.5: The system shall implement row-level security in Supabase for data access control.
- NFR-6.2.6: Google OAuth tokens shall be securely stored and refreshed automatically.

### 6.3 Compliance (GDPR)
- NFR-6.3.1: The system shall obtain explicit consent for email communications.
- NFR-6.3.2: The system shall provide a way for users to access their personal data.
- NFR-6.3.3: The system shall provide a way for users to delete their accounts and data.
- NFR-6.3.4: The system shall document data retention policies.
- NFR-6.3.5: The system shall implement appropriate data protection measures.
- NFR-6.3.6: Google Calendar access permissions shall be clearly explained to users.

### 6.4 Scalability
- NFR-6.4.1: The system shall support at least 20 concurrent users initially.
- NFR-6.4.2: The system shall support at least 100 events per month initially.
- NFR-6.4.3: The database design shall support future scaling needs.
- NFR-6.4.4: The system architecture shall allow for horizontal scaling when needed.

### 6.5 Reliability
- NFR-6.5.1: The system shall have 99.9% uptime during business hours.
- NFR-6.5.2: The system shall implement automated backups of all data.
- NFR-6.5.3: The system shall handle payment webhook failures gracefully.
- NFR-6.5.4: The system shall implement appropriate error handling and logging.
- NFR-6.5.5: Google Calendar API failures shall not prevent RSVP/ticket purchase completion.

### 6.6 Accessibility
- NFR-6.6.1: The system shall comply with WCAG 2.1 Level AA standards.
- NFR-6.6.2: The system shall support screen readers for all core functionality.
- NFR-6.6.3: The system shall maintain appropriate color contrast ratios.
- NFR-6.6.4: The system shall provide alternative text for all images.

### 6.7 SEO Requirements
- NFR-6.7.1: Event pages shall have SEO-friendly URLs.
- NFR-6.7.2: The system shall implement proper meta tags for all pages.
- NFR-6.7.3: The system shall generate a sitemap for search engines.
- NFR-6.7.4: The system shall use server-side rendering for improved SEO.

### 6.8 Browser Compatibility
- NFR-6.8.1: The system shall support the latest versions of Chrome, Firefox, Safari, and Edge.
- NFR-6.8.2: The system shall support iOS Safari and Android Chrome on mobile devices.
- NFR-6.8.3: The system shall gracefully degrade for older browsers when possible.

## 7. Technical Architecture

### 7.1 Tech Stack Overview
- Frontend: Next.js (from 1000x-app template) with Tailwind CSS
- Backend: Supabase (Postgres, Auth, Storage, RLS)
- **Google Calendar API: Direct integration for calendar event creation** (Client Requirement)
- Payments: Stripe (checkout, webhooks)
- Testing: Playwright E2E
- Deployment: Vercel
- Optional: Resend or Mailgun (emails), PostHog (later for analytics)

### 7.2 Frontend Architecture
- Next.js framework with TypeScript
- Server-side rendering (SSR) for SEO optimization
- Incremental Static Regeneration (ISR) for homepage and filters
- Tailwind CSS for responsive design
- React Query for data fetching and caching
- Component-based architecture with reusable UI elements
- **Google Calendar API integration components**

### 7.3 Backend and Database
- Supabase Postgres database
- Row-Level Security (RLS) policies for data access control
- Database schema with proper indexing for efficient queries
- Full-text search capabilities for event search
- Computed columns for derived data (e.g., event status)
- Supabase Storage for image uploads

### 7.4 Authentication and Authorization
- Supabase Auth for user authentication
- Email/password and OAuth providers (Google, Apple)
- **Google OAuth 2.0 for Calendar API access** (Client Requirement)
- JWT-based session management
- Role-based access control for staff and admin functions
- Row-level security policies for data access

### 7.5 External Integrations
- **Google Calendar API for event creation** (Primary Client Requirement)
- Stripe API for payment processing
- Stripe Webhooks for payment confirmations
- Email service (Resend or Mailgun) for notifications
- .ics file generation for non-Google calendar fallback
- Mapbox or Google Maps API for location display

### 7.6 Deployment Architecture
- Vercel for frontend hosting and serverless functions
- Supabase for database and authentication
- **Google Cloud Console for Calendar API credentials**
- Edge caching for improved performance
- Automated CI/CD pipeline for deployments
- Environment-based configuration (development, staging, production)

## 8. Data Models and Schema

### 8.1 User Data Model
```
users {
  id: uuid (PK)
  email: string (unique)
  created_at: timestamp
  updated_at: timestamp
  display_name: string
  avatar_url: string (nullable)
  email_verified: boolean
  email_preferences: jsonb
  google_calendar_access_token: text (nullable, encrypted)
  google_calendar_refresh_token: text (nullable, encrypted)
  google_calendar_token_expires_at: timestamp (nullable)
}
```

### 8.2 Event Data Model
```
events {
  id: uuid (PK)
  created_at: timestamp
  updated_at: timestamp
  title: string
  description: text
  start_time: timestamp
  end_time: timestamp
  location: string
  location_details: text (nullable)
  latitude: float (nullable)
  longitude: float (nullable)
  is_online: boolean
  category: string
  capacity: integer
  is_paid: boolean
  organizer_id: uuid (FK to users)
  image_url: string (nullable)
  status: string (computed: upcoming, in_progress, past, full)
  google_calendar_event_template: jsonb (for consistent calendar event creation)
}
```

### 8.3 RSVP Data Model
```
rsvps {
  id: uuid (PK)
  created_at: timestamp
  event_id: uuid (FK to events)
  user_id: uuid (FK to users, nullable for guests)
  guest_email: string (nullable for registered users)
  status: string (confirmed, cancelled)
  check_in_time: timestamp (nullable)
  google_calendar_event_id: string (nullable, for event deletion if RSVP cancelled)
  added_to_google_calendar: boolean (default false)
}
```

### 8.4 Ticket and Order Data Model
```
ticket_types {
  id: uuid (PK)
  event_id: uuid (FK to events)
  name: string
  description: text (nullable)
  price: integer (in cents)
  capacity: integer (nullable)
  sort_order: integer
}

orders {
  id: uuid (PK)
  created_at: timestamp
  user_id: uuid (FK to users, nullable for guests)
  guest_email: string (nullable for registered users)
  event_id: uuid (FK to events)
  status: string (pending, completed, refunded, failed)
  total_amount: integer (in cents)
  stripe_payment_intent_id: string (nullable)
  refunded_at: timestamp (nullable)
  google_calendar_event_id: string (nullable)
  added_to_google_calendar: boolean (default false)
}

tickets {
  id: uuid (PK)
  order_id: uuid (FK to orders)
  ticket_type_id: uuid (FK to ticket_types)
  quantity: integer
  unit_price: integer (in cents)
  attendee_name: string (nullable)
  attendee_email: string (nullable)
  confirmation_code: string
  check_in_time: timestamp (nullable)
}
```

### 8.5 Relationships and Constraints
- Users can create multiple events (one-to-many)
- Events can have multiple RSVPs (one-to-many)
- Events can have multiple ticket types (one-to-many)
- Orders belong to one user or guest (many-to-one)
- Orders contain multiple tickets (one-to-many)
- Tickets are associated with one ticket type (many-to-one)
- **Users have Google Calendar tokens for API access** (Client Requirement)
- **RSVPs and Orders track Google Calendar integration status**

## 9. API Specifications

### 9.1 Authentication Endpoints
- POST /auth/signup - Register new user
- POST /auth/login - User login
- POST /auth/logout - User logout
- POST /auth/reset-password - Request password reset
- POST /auth/verify-email - Verify email address
- **POST /auth/google-calendar - Initiate Google Calendar OAuth flow** (Client Requirement)
- **POST /auth/google-calendar/callback - Handle Google OAuth callback**

### 9.2 Event Endpoints
- GET /api/events - List events with filtering
- GET /api/events/:id - Get event details
- POST /api/events - Create new event (authenticated, organizer role)
- PUT /api/events/:id - Update event (authenticated, organizer role)
- DELETE /api/events/:id - Cancel event (authenticated, organizer role)
- GET /api/events/:id/attendees - List event attendees (authenticated, organizer role)

### 9.3 RSVP Endpoints
- POST /api/events/:id/rsvp - Create RSVP
- DELETE /api/events/:id/rsvp - Cancel RSVP
- GET /api/user/rsvps - Get user's RSVPs (authenticated)
- **POST /api/events/:id/add-to-google-calendar - Add event to Google Calendar** (Client Requirement)

### 9.4 Google Calendar Integration Endpoints (CLIENT REQUIREMENT)
- **POST /api/calendar/google/auth - Initiate Google Calendar authentication**
- **GET /api/calendar/google/callback - Handle OAuth callback**
- **POST /api/calendar/google/add-event - Add event to user's Google Calendar**
- **DELETE /api/calendar/google/remove-event - Remove event from Google Calendar**
- **GET /api/calendar/google/status - Check user's Google Calendar connection status**

### 9.5 Ticketing Endpoints
- GET /api/events/:id/ticket-types - List ticket types for event
- POST /api/orders - Create order and initiate checkout
- GET /api/orders/:id - Get order details
- POST /api/orders/:id/refund - Process refund (authenticated, organizer role)
- GET /api/user/tickets - Get user's tickets (authenticated)

### 9.6 User Profile Endpoints
- GET /api/user/profile - Get user profile (authenticated)
- PUT /api/user/profile - Update user profile (authenticated)
- PUT /api/user/email-preferences - Update email preferences (authenticated)
- DELETE /api/user/account - Delete user account (authenticated)

### 9.7 Admin Endpoints
- GET /api/admin/events - List all events (authenticated, admin role)
- GET /api/admin/users - List users (authenticated, admin role)
- PUT /api/admin/users/:id/role - Update user role (authenticated, admin role)

### 9.8 Webhook Handlers
- POST /api/webhooks/stripe - Handle Stripe payment webhooks
- POST /api/webhooks/email - Handle email delivery webhooks

## 10. User Interface Requirements

### 10.1 Design System and Components
- Typography: Primary font for headings and body text
- Color palette: Primary, secondary, accent, and neutral colors
- Component library: Buttons, forms, cards, modals, etc.
- Icons: Consistent icon set throughout the application
- Spacing system: Consistent spacing scale
- **Google Calendar integration buttons and flows**

### 10.2 Responsive Breakpoints
- Mobile: 320px - 639px
- Tablet: 640px - 1023px
- Desktop: 1024px and above

### 10.3 Key Screen Specifications
1. Homepage
   - Hero section with featured events
   - Filter controls
   - Event card grid/list
   - Pagination or infinite scroll

2. Event Detail Page
   - Event image
   - Event details section
   - Location map
   - RSVP/ticket purchase section
   - **Prominent "Add to Google Calendar" button** (Client Requirement)

3. Checkout Flow
   - Ticket selection
   - Order summary
   - Payment form
   - Confirmation page
   - **Google Calendar integration option**

4. User Profile
   - Account information
   - Upcoming events
   - Past events
   - Email preferences
   - **Google Calendar connection status**

5. Staff Dashboard
   - Event management table
   - Event creation/edit form
   - Attendee management
   - Analytics overview

### 10.4 Navigation Structure
- Main navigation: Home, Browse Events, (Login/Register or Profile)
- Footer: About, Contact, Terms, Privacy Policy
- User menu: Profile, My Events, Settings, Logout
- Staff dashboard: Events, Attendees, Analytics, Settings

### 10.5 Accessibility Guidelines
- All interactive elements must be keyboard accessible
- Proper heading hierarchy (h1, h2, etc.)
- Sufficient color contrast for text
- Alternative text for images
- ARIA attributes where appropriate
- Focus indicators for interactive elements

## 11. Implementation Plan

### 11.1 Development Phases

**Phase 1: Foundation (Weeks 1-2)**
- Project setup and configuration
- Authentication system implementation
- **Google Calendar API integration setup** (Client Requirement)
- Database schema creation
- Basic UI components and layout

**Phase 2: Core Features (Weeks 3-5)**
- Event discovery and browsing
- Event detail pages
- RSVP functionality
- **Google Calendar integration for RSVPs** (Client Requirement)
- User profiles

**Phase 3: Ticketing and Payments (Weeks 6-7)**
- Stripe integration
- Ticket types and checkout flow
- Order management
- Email confirmations
- **Google Calendar integration for paid events**

**Phase 4: Staff Dashboard (Weeks 8-9)**
- Event creation and management
- Attendee management
- Basic analytics
- Data export

**Phase 5: Testing and Refinement (Weeks 10-12)**
- End-to-end testing
- **Google Calendar API integration testing**
- Performance optimization
- Bug fixes and refinements
- Documentation

### 11.2 Milestones and Deliverables

**Milestone 1: MVP Foundation**
- Authentication system working
- **Google Calendar API credentials and OAuth flow setup**
- Database schema implemented
- Basic UI components created
- Deliverable: Working prototype with authentication and Google Calendar setup

**Milestone 2: Event Discovery**
- Homepage with event listings
- Filtering and search functionality
- Event detail pages
- Deliverable: Functional event browsing experience

**Milestone 3: RSVP System**
- RSVP functionality for free events
- **Google Calendar integration for RSVPs** (Client Requirement)
- User profiles with event history
- Email confirmations
- Deliverable: Complete RSVP flow with Google Calendar integration

**Milestone 4: Ticketing System**
- Paid event creation
- Stripe checkout integration
- Ticket management
- **Google Calendar integration for paid events**
- Deliverable: End-to-end ticketing flow

**Milestone 5: Staff Dashboard**
- Event management interface
- Attendee tracking
- Basic analytics
- Deliverable: Functional staff dashboard

**Milestone 6: Production Release**
- Full testing completed
- **Google Calendar API integration fully tested**
- Performance optimized
- Documentation finalized
- Deliverable: Production-ready application

### 11.3 Dependencies
- Supabase account and project setup
- **Google Cloud Console project and Calendar API credentials** (Client Requirement)
- Stripe account and API keys
- Vercel account for deployment
- Domain name for production
- Email service provider account

### 11.4 Testing Strategy
- Unit tests for core functionality
- **Google Calendar API integration testing** (Client Requirement)
- Integration tests for API endpoints
- End-to-end tests for critical user flows (RSVP, ticketing, calendar integration)
- Cross-browser testing
- Mobile device testing
- Performance testing

### 11.5 Deployment Strategy
- Development environment for ongoing work
- Staging environment for testing
- Production environment for live application
- **Google Calendar API environment configuration**
- Automated CI/CD pipeline
- Database migration strategy
- Backup and recovery procedures

## 12. Future Roadmap (Post-MVP)

### 12.1 Community Engagement Features
- User comments and discussions on event pages
- Ratings and reviews for past events
- Follow organizers for updates on new events
- Community message boards or forums

### 12.2 Enhanced Analytics
- Detailed attendance tracking
- Conversion metrics for page views to RSVPs/tickets
- Revenue reporting for paid events
- User acquisition and retention analytics
- **Google Calendar usage analytics**

### 12.3 Mobile App Version
- Native mobile app experience
- Push notifications for event reminders
- Offline access to ticket information
- Location-based event discovery
- **Native Google Calendar integration**

### 12.4 Advanced Ticketing Features
- Tiered pricing and early bird discounts
- Promotional codes and discounts
- Subscription/membership models for regular events
- Group bookings and bulk ticket purchases

### 12.5 Calendar Integration Enhancements
- **Two-way Google Calendar sync** (updates from calendar to platform)
- **Integration with other calendar providers** (Apple, Outlook)
- Personalized event recommendations
- Availability-based event scheduling
- Recurring event series management

## 13. Appendices

### 13.1 System Architecture Diagram
[See attached diagram]

### 13.2 User Flow Diagrams
- Event Discovery Flow
- RSVP Flow
- **Google Calendar Integration Flow** (Client Requirement)
- Ticketing Flow
- User Registration Flow
- Event Creation Flow

### 13.3 Database Schema Diagram
[See database schema section]

### 13.4 API Documentation
[See API specifications section]

### 13.5 Google Calendar API Integration Guide (CLIENT REQUIREMENT)
- OAuth 2.0 setup and configuration
- Event creation API usage
- Error handling and rate limiting
- Token management and refresh
- Testing and debugging procedures

### 13.6 Glossary
- **RSVP**: "Répondez s'il vous plaît" - A request to respond to an invitation
- **MVP**: Minimum Viable Product
- **UX**: User Experience
- **SSR**: Server-Side Rendering
- **RLS**: Row-Level Security (Supabase feature)
- **ISR**: Incremental Static Regeneration (Next.js feature)
- **WCAG**: Web Content Accessibility Guidelines
- **GDPR**: General Data Protection Regulation
- **PCI**: Payment Card Industry
- **Google Calendar API**: Google's RESTful API for accessing and manipulating calendar data
- **OAuth 2.0**: Authorization framework for secure API access
